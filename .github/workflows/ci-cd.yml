name: CI/CD Pipeline with Auto Version Tagging

on:
  push:
    branches:
      - master  # Trigger on commits pushed to the master branch

env:
  IMAGE_NAME: sanjayraj/cocaptan  # Docker Hub repository
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  HOST: ${{ secrets.HOST }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Fetch all tags from remote
      - name: Fetch all tags from remote
        run: git fetch --tags

      # Step 3: Get the latest Git tag and increment it
      - name: Get the latest Git tag and increment it
        id: set_version_tag
        run: |
          # Fetch tags starting with "v" and ensure they are proper version numbers
          TAGS=$(git tag -l "v[0-9]*")

          # Debug output to check tags found
          echo "Fetched version tags: $TAGS"
          
          # If no valid version tags exist, start with v1
          if [ -z "$TAGS" ]; then
            VERSION_TAG="v1"
          else
            # Filter only valid versions that are like v1, v2, v3...
            VALID_TAGS=$(echo "$TAGS" | grep -E '^v[0-9]+$')
            
            # If no valid tags are found, initialize with v1
            if [ -z "$VALID_TAGS" ]; then
              VERSION_TAG="v1"
            else
              # Sort valid tags numerically and select the highest one
              VERSION_TAG=$(echo "$VALID_TAGS" | sort -V | tail -n 1)
              VERSION_NUMBER=$(echo $VERSION_TAG | sed 's/^v//')
              VERSION_TAG="v$((VERSION_NUMBER + 1))"
            fi
          fi

          # Output the new version tag
          echo "The tag being used is: $VERSION_TAG"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$VERSION_TAG .

      # Step 6: Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: docker push $IMAGE_NAME:$VERSION_TAG

      # Step 7: SSH and deploy to remote server
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}

      - name: Deploy Application to Droplet
        run: |
          ssh root@$HOST "
            docker pull $IMAGE_NAME:$VERSION_TAG &&
            docker stop cocaptan || true &&
            docker rm cocaptan || true &&
            docker run -d --name cocaptan -p 9000:9000 $IMAGE_NAME:$VERSION_TAG
          "
        env:
          HOST: ${{ secrets.HOST }}
